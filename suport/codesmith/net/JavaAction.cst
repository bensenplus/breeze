<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" ResponseEncoding="UTF-8" Inherits="" Debug="False" Description="Template description here." %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Data.OleDb" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>

<%-- 注册 定义的成员变量 --%>
<%@ Property Name="excelPath" Type="System.String" Default="D:/phis设计_V01.xls" Optional="False" Category="Context" Description="Excel文件路径" %>
<%@ Property Name="OutPath" Type="System.String" Default="D:/java/action" Optional="False" Category="Context" Description="源码输出路径" %>

<%-- 启用 MAP方式 System-CSharpAlias  --%>
<%@ Map Name="CSharpAlias" Src="System-CSharpAlias" Description="System to C# Type Map" %>

<script runat="template">
<!-- #include file=Function.cs -->
 
</script>
<% 
//名称定义
DataTable table = LoadDataFromExcel(excelPath,"服务");
//sw.WriteValues(table);

if(Directory.Exists(OutPath) == false)
{
    Directory.CreateDirectory(OutPath);
}

/// 创建文件
string path =null;
StreamWriter sw = null;
FileStream fs = null;
string actionName = null;
string serviceName = null;

foreach(DataRow row in table.Rows)
{

    if(row["Function Name"].ToString().Trim().Equals(""))
    {
        if(fs != null && sw != null){
            sw.WriteLine("}");
            sw.Close();
            fs.Close();
            sw = null;
            fs = null;
            
        }
        
        path = OutPath + "\\"+row["Package"].ToString().Replace("com.founder.phis.action.","");
        
        if(Directory.Exists(path) == false)
        {
            Directory.CreateDirectory(path);
        }
        
        serviceName = StringUtil.ToCamelCase(row["Service Name"].ToString().Substring(1));        
        actionName = serviceName.Replace("Service","Action");
        
        path = path+"\\"+ StringUtil.ToPascalCase(actionName)+".java";
        

        
        println(path);
        fs = new FileStream(path,FileMode.Create,FileAccess.Write);
        sw = new StreamWriter(fs, System.Text.Encoding.UTF8);
        
        sw.WriteLine("package "+row["Package"]+";");
        sw.WriteLine();
        sw.WriteLine("import java.util.HashMap;");
        sw.WriteLine("import javax.annotation.Resource;");
        sw.WriteLine("import org.springframework.stereotype.Component;");

        sw.WriteLine("import com.founder.fasf.beans.Criteria;");
        sw.WriteLine("import com.founder.fasf.beans.Order;");
        sw.WriteLine("import com.founder.fasf.beans.Page;");
        sw.WriteLine("import com.founder.fasf.beans.PageList;");
        sw.WriteLine("import "+row["Package"].ToString().Replace("action","service")+".I"+StringUtil.ToPascalCase(serviceName)+";");
        sw.WriteLine("import com.founder.phis.entity.*;");
        sw.WriteLine();
        sw.WriteLine("@Component(\"" + actionName + "\")");
        sw.WriteLine("public class " + StringUtil.ToPascalCase(actionName) +"extends BaseAction {");
        
        ///write service
        sw.WriteLine();

        sw.WriteLine("\t@Resource(name=\"" + serviceName + "\")");
        sw.WriteLine("\tprivate I"+StringUtil.ToPascalCase(serviceName)+" "+serviceName+";");
        
        continue;
    }                                                           

    sw.WriteLine("\t///"+row["Function Comment"]);
    sw.Write("\tpublic "+row["Return"]+" ");
    sw.Write(row["Function Name"]+"(");
    if(!row["Type1"].ToString().Trim().Equals("")) sw.Write(row["Type1"] +" " + row["Name1"]);
    if(!row["Type2"].ToString().Trim().Equals("")) sw.Write(" ," + row["Type2"] +" " + row["Name2"]);
    if(!row["Type3"].ToString().Trim().Equals("")) sw.Write(" ," + row["Type3"] +" " + row["Name3"]);
    if(!row["Type4"].ToString().Trim().Equals("")) sw.Write(" ," + row["Type4"] +" " + row["Name4"]);
    sw.WriteLine("){");
    
    if(row["Name1"].ToString().Equals("condition")){
        sw.WriteLine("\t\tCriteria criteria = new Criteria();");
        sw.WriteLine("\t\t//TODO");
    }
    
    sw.Write("\t\treturn "+serviceName+".");
    sw.Write(row["Function Name"]+"(");
     if(row["Name1"].ToString().Equals("condition")){
         if(!row["Name1"].ToString().Trim().Equals("")) sw.Write("criteria");
     }else{
        if(!row["Name1"].ToString().Trim().Equals("")) sw.Write(row["Name1"]);
    }
    if(!row["Name2"].ToString().Trim().Equals("")) sw.Write(" ," + row["Name2"]);
    if(!row["Name3"].ToString().Trim().Equals("")) sw.Write(" ," + row["Name3"]);
    if(!row["Name4"].ToString().Trim().Equals("")) sw.Write(" ," + row["Name4"]);    
    sw.WriteLine(");");
    
    sw.WriteLine("\t}");
    sw.WriteLine();
}

if(fs != null && sw != null){
    sw.WriteLine("}");
    sw.Close();
    fs.Close();
    sw = null;
    fs = null;
    
}

%>
