<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." ResponseEncoding="UTF-8"  %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>

<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>


<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="指定的数据库表结构" %>
<%@ Property Name="OutputPath" Type="System.String" Default="E:/breeze/trunk/src/main" Optional="False" Category="Context" Description="源码输出主目录" %>
<%@ Property Name="RootTableSpaceName" Type="System.String" Default="org.breeze" Optional="False" Category="Context" Description="源码输出的模块名称" %>


<%-- 启用 MAP方式 System-CSharpAlias  --%>
<%@ Map Name="CSharpAlias" Src="System-CSharpAlias" Description="System to C# Type Map" %>
<%@ Map Name="JavaAlias" Src="JavaAlias.csmap" Description="Oracle to Java Type Map" %>

<%-- 注册 子模板 --%>
<%@ Register Name="Entity" Template="Entity.cst" %>
<%@ Register Name="Repository" Template="Repository.cst" %>
<%@ Register Name="Service" Template="Service.cst" %>
<%@ Register Name="Controller" Template="Controller.cst" %>

<%@ Register Name="JspIndex" Template="JspIndex.cst" %>
<%@ Register Name="JspList" Template="JspList.cst" %>
<%@ Register Name="JspEdit" Template="JspEdit.cst" %>

<%
    //Debugger.Break();    
    //this.Progress.MaximumValue = 100;
    //this.Progress.MinimumValue = 1;
    //this.Progress.Step = 1;
    /// 主输出
    RenderMain();
%>

Done and Finish  !!!!!!!!!!!!!!!!!!!!!!!!

<script runat="template">

<!-- #include file=Function.cs -->

/// 创建输出文件
public void RenderMain()
{    
	CreateTemplate<Entity>(SourceTable, "java."+RootTableSpaceName+".entity", ModelName(SourceTable.Name)+"."+"java");
	CreateTemplate<Repository>(SourceTable, "java."+RootTableSpaceName+".repository", ModelName(SourceTable.Name)+"Repository."+"java");
	CreateTemplate<Service>(SourceTable, "java."+RootTableSpaceName+".service", ServiceName(SourceTable.Name)+"."+"java");
	CreateTemplate<Controller>(SourceTable, "java."+RootTableSpaceName+".controller", ControllerName(SourceTable.Name)+"."+"java");

	CreateTemplate<JspIndex>(SourceTable, "webapp.view."+StringUtil.ToCamelCase(SourceTable.Name.ToLower()), "index.jsp");
	CreateTemplate<JspList>(SourceTable, "webapp.view."+StringUtil.ToCamelCase(SourceTable.Name.ToLower()), "list.jsp");
	CreateTemplate<JspEdit>(SourceTable, "webapp.view."+StringUtil.ToCamelCase(SourceTable.Name.ToLower()), "edit.jsp");

}


///  输出模块
public void CreateTemplate<T>(TableSchema tb, string path, string filename)
{
    path = OutputPath +"/"+ path.Replace(".",@"/");
    if(Directory.Exists(path) == false)
    {
        Directory.CreateDirectory(path);
    }
    path = path +"/"+ filename;
        
	/// 创建文件
    FileStream fs = new FileStream(path,FileMode.Create,FileAccess.Write);
    StreamWriter sw = new StreamWriter(fs, System.Text.Encoding.UTF8);
        
    // 调用子模板进行创建 
    T template = System.Activator.CreateInstance<T>();
    
    Type type = typeof(T);
    type.GetProperty("SourceTable").SetValue(template, tb,null);
    type.GetProperty("RootTableSpaceName").SetValue(template, this.RootTableSpaceName,null);
    type.GetMethod("Render").Invoke(template, new Object[]{sw});
    sw.Close();
    //关闭文档
    fs.Close();
    Response.WriteLine(path);
}

</script>