<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" ResponseEncoding="UTF-8"  Inherits="" Debug="False" Description="Template description here." %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>

<%-- 启用 MAP方式 System-CSharpAlias  --%>
<%@ Map Name="CSharpAlias" Src="System-CSharpAlias" Description="System to C# Type Map" %>
<%@ Map Name="JavaAlias" Src="JavaAlias.csmap" Description="Oracle to Java Type Map" %>

<%-- 注册 成员函数 --%>
<%@ Property Name="SourceData" Type="SchemaExplorer.DatabaseSchema" Optional="False" Category="Context" Description="指定的数据库" %>
<%@ Property Name="OutputPath" Type="System.String" Default="E:/breeze/trunk/breeze-web/src/main" Optional="False" Category="Context" Description="源码输出目录" %>
<%@ Property Name="ExportTableName" Type="System.String" Default="users" Optional="False" Category="Context" Description="需要输出的表：支撑多个,每个表名之间用“;”分 TABLE_1;TABLE_2;" %>
<%@ Property Name="RootTableSpaceName" Type="System.String" Default="org.breeze" Optional="False" Category="Context" Description="源码输出的模块名称 com.scitel.dialtestmgr " %>

<%-- 注册 子模板 --%>
	<%@ Register Name="GenerateSingle" Template="GenerateSingle.cst" %>
	<%@ Register Name="JspMenu" Template="JspMenu.cst" %>
<%
    RenderMain();
%>

Done and Finish  !!!!!!!!!!!!!!

<script runat="template">

<!-- #include file=Function.cs -->

/// 得到数据源的全部表结构
/// 并返回一个 表的结合 
public TableSchemaCollection GetTableCollection(DatabaseSchema dataBase)
{
    TableSchemaCollection tables = new TableSchemaCollection(dataBase.Tables);
    return tables;
}

/// 创建输出文件
public void RenderMain()
{
    /// Get 
    TableSchemaCollection tables = GetTableCollection(SourceData);
    
    // 判断文最外层目录是否存在,否则创建 
    if(Directory.Exists(OutputPath) == false)
    {
        Directory.CreateDirectory(OutputPath);
    }
    
     Response.WriteLine("Output Path " + OutputPath);
    
    
    CreateTemplate<JspMenu>(SourceData, "webapp.layout", "menu.jsp");
 
    /// 重复调用单个的子模板
    int count = 0;
    foreach(TableSchema dt in tables)
    {
		System.Diagnostics.Debug.WriteLine(ExportTableName);
		System.Diagnostics.Debug.WriteLine(dt.Name);
		
		///支撑特定表的输出;
		if ( ExportTableName.ToUpper().IndexOf(dt.Name.ToUpper(),0 )  >= 0 || ExportTableName == string.Empty )
		{
			try
			{
				GenerateSingle export = new GenerateSingle();
			
				export.SourceTable = dt; 
				export.OutputPath  = this.OutputPath;
				export.RootTableSpaceName = this.RootTableSpaceName;
				// 输出
				export.RenderMain();
                Response.WriteLine("Successed:" + dt.Name);
			}
			catch(Exception ex )
			{
				Console.WriteLine(ex.Message);	
			}
		}
       
       if(++count>10) break;
    }
	
}


///  输出模块
public void CreateTemplate<T>(DatabaseSchema database, string path, string filename)
{
    path = OutputPath +"/"+ path.Replace(".",@"/");
    if(Directory.Exists(path) == false)
    {
        Directory.CreateDirectory(path);
    }
    path = path +"/"+ filename;
        
	/// 创建文件
    FileStream fs = new FileStream(path,FileMode.Create,FileAccess.Write);
    StreamWriter sw = new StreamWriter(fs, System.Text.Encoding.UTF8);
        
    // 调用子模板进行创建 
    T template = System.Activator.CreateInstance<T>();
    
    Type type = typeof(T);
    type.GetProperty("SourceData").SetValue(template, database,null);
    type.GetMethod("Render").Invoke(template, new Object[]{sw});
    sw.Close();
    //关闭文档
    fs.Close();
    Response.WriteLine(path);
}

</script>